pragma abicoder               v2;

contract C {
    function f(uint256[] calldata s) external pure returns (bytes memory) {
        return abi.encode(s);
    }
    function g(uint256[][2] calldata s, uint256 which) external view returns (bytes memory) {
        return this.f(s[which]);
    }
    function h(uint8[] calldata s) external pure returns (bytes memory) {
        return abi.encode(s);
    }
    function i(uint8[][2] calldata s, uint256 which) external view returns (bytes memory) {
        return this.h(s[which]);
    }
    function j(bytes calldata s) external pure returns (bytes memory) {
        return abi.encode(s);
    }
    function k(bytes[2] calldata s, uint256 which) external view returns (bytes memory) {
        return this.j(s[which]);
    }
}
// ====
// compileViaYul: also
// EVMVersion: >homestead
// ----
// f(uint256[]): dynarray 256 [ 42, 23, 87 ] -> "\x01\x03\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
// g(uint256[][2],uint256): refargs { 0x01, 0x03, 0x000000000000000000000000000000000000000000000000000000000000002a, 0x0000000000000000000000000000000000000000000000000000000000000017, 0x0000000000000000000000000000000000000000000000000000000000000057, 0x01, 0x04, 0x000000000000000000000000000000000000000000000000000000000000000b, 0x000000000000000000000000000000000000000000000000000000000000000d, 0x0000000000000000000000000000000000000000000000000000000000000011 }, 0 -> "\x01\x03\x2a\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x57\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
// g(uint256[][2],uint256): refargs { 0x01, 0x03, 0x000000000000000000000000000000000000000000000000000000000000002a, 0x0000000000000000000000000000000000000000000000000000000000000017, 0x0000000000000000000000000000000000000000000000000000000000000057, 0x01, 0x04, 0x000000000000000000000000000000000000000000000000000000000000000b, 0x000000000000000000000000000000000000000000000000000000000000000d, 0x0000000000000000000000000000000000000000000000000000000000000011, 0x000000000000000000000000000000000000000000000000000000000000001b }, 1 -> "\x01\x04\x0b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
// h(uint8[]): dynarray 8 [ 42, 23, 87 ] -> "\x01\x03\x2a\x17\x57"
// i(uint8[][2],uint256): refargs { 0x01, 0x03, 0x2a, 0x17, 0x57, 0x01, 0x04, 0x0b, 0x0d, 0x11 }, 0 -> "\x01\x03\x2a\x17\x57"
// i(uint8[][2],uint256): refargs { 0x01, 0x03, 0x2a, 0x17, 0x57, 0x01, 0x04, 0x0b, 0x0d, 0x11, 0x1b }, 1 -> "\x01\x04\x0b\x0d\x11\x1b"
// j(bytes): "\xAB\x11\xFF" -> "\x03\x00\x00\x00\x00\x00\x00\x00\xFF\x11\xAB"
// k(bytes[2],uint256): refargs { "\xAB\x11\xFF", "\xFF\x79\x14\x32" }, 0 -> "\x03\x00\x00\x00\x00\x00\x00\x00\xFF\x11\xAB"
// k(bytes[2],uint256): refargs { "\xAB\x11\xFF", "\xFF\x79\x14\x32" }, 1 -> "\x04\x00\x00\x00\x00\x00\x00\x00\x32\x14\x79\xFF"
